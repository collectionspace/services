<project name="report.3rdparty" default="package" basedir=".">
    <description>
        report service 3rdparty
    </description>
  <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="nuxeo.report.jars.all"
        value="collectionspace.report.*.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
    <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
  description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
  description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <!--
         Preserve the legacy name for this target, while noting that
         legacy name is no longer descriptive of its purpose.
     -->
    <target name="deploy_jasper_samples" depends="deploy_report_files" />

    <target name="deploy_report_files"
        description="Deploy report files and metadata files">
        <copy todir="${jee.server.cspace}/cspace/reports" overwrite="true">
            <fileset dir="${basedir}/jasper-cs-report/src/main/resources"
                includes="*.jrxml,*.xml"/>
        </copy>
    </target>

    <target name="undeploy_report_files"
      depends="undeploy_source_report_files,undeploy_compiled_report_files"
      description="Undeploy report files">
    </target>

	<!-- Removes only the source reports that originated from the source directory.  Ones added
		manually remain.
	-->
    <target name="undeploy_source_report_files"
      description="Undeploy source (.jrxml) report files and metadata (.xml) files">
      <delete failonerror="false">
        <fileset dir="${jee.server.cspace}/cspace/reports" includes="*.jrxml,*.xml">
			<present targetdir="${basedir}/jasper-cs-report/src/main/resources" />
		</fileset>
      </delete>
    </target>

    <target name="undeploy_compiled_report_files"
      description="Undeploy compiled (.jasper) report files">
      <delete failonerror="false">
        <fileset dir="${jee.server.cspace}/cspace/reports" includes="*.jasper"/>
      </delete>
    </target>

    <target name="deploy" depends="install,deploy_report_files"
      description="Deploy report-related artifacts">
      <!--
        The following ant call is obsolete.  The Nuxeo artifacts are now created
        and deployed using the "csmake" tool.
        <ant antfile="nuxeo-platform-cs-report/build.xml" target="deploy" inheritall="false"/>
      -->
    </target>

    <target name="undeploy" depends="undeploy_report_files" description="Undeploy report-related artifacts">
        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.report.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist" description="Generate distribution for report" depends="package">
    </target>


</project>
