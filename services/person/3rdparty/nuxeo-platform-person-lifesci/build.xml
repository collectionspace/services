
<project name="nuxeo-platform-person-lifesci" default="package" basedir=".">
    <description>
        Person nuxeo document type for the lifesci tenant
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../../.."/>
    <!-- environment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="dist"  location="dist"/>
    <!-- JAR files used by CollectionSpace 4.0 and later -->
    <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
    <!-- in another Ant buildfile, in a peer module to this module -->
    <!-- Legacy JAR files used by CollectionSpace 3.3 and earlier -->
    <property name="nuxeo.person.lifesci.legacy.jars.all"
        value="org.collectionspace.services.person.3rdparty.lifesci.nuxeo-*.jar"/>
    <property name="nuxeo.person.lifesci.legacy.jar"
        value="org.collectionspace.services.person.3rdparty.lifesci.nuxeo-${cspace.release}.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
    </target>

    <target name="package" depends="package-unix,package-windows"
        description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
  description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    
    <target name="clean" depends="clean-unix,clean-windows"
        description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
        description="deploy person doctype in ${jee.server.nuxeo}">
        <!-- This target is obsolete.  The Nuxeo artifacts are now created and deployed using the "csmake" tool
        leaving this only for backwards compatibility reasons. -->  
        <copy file="${basedir}/target/${nuxeo.person.lifesci.legacy.jar}"
            todir="${jee.deploy.nuxeo.plugins}"/>
    </target>

    <target name="undeploy"
        description="undeploy person doctype from ${jee.server.nuxeo}">
        <delete>
            <!-- Both doctype and schema JAR(s) are removed via the 'undeploy' target -->
            <!-- in another Ant buildfile, in a peer module to this module -->
            <!-- Undeploy legacy artifacts -->
            <!-- Additional legacy JAR(s) are removed via the 'undeploy' target in the -->
            <!-- Ant buildfile for the common schema -->
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="${nuxeo.person.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
        <!-- Undeploy legacy artifacts from old deployment location through release 0.6 -->
        <delete quiet="true">
            <fileset dir="${jee.deploy.nuxeo.system}">
                <include name="${nuxeo.person.lifesci.legacy.jars.all}"/>
            </fileset>
        </delete>
    </target>

    <target name="dist"
    	description="generate distribution for person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.deploy.nuxeo.plugins}">
            <fileset file="${basedir}/target/${nuxeo.person.jar}"/>
        </copy>
    </target>

    <target name="dist_installer"
    	description="Creates an installer distribution for Person doctype" depends="package">
        <copy todir="${services.trunk}/${dist.installer.services}/person/nuxeo">
            <fileset file="${basedir}/target/${nuxeo.person.jar}"/>
        </copy>
    </target>
</project>
