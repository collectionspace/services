<project name="common" default="package" basedir=".">
    <description>
        Collectionspace Services common module
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />

    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="build" location="build"/>
    <property name="common.jar" value="collectionspace-services-common.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />

    </condition>

    <target name="init" >
        <!-- Create the time stamp -->
        <tstamp/>
    </target>

    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">

            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">

        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />

        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />

            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />

            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">

            <arg value="/c" />
            <arg value="mvn" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy_nuxeo"
            description="deploy nuxeo binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/nuxeo" includes="*.jar" />
        </copy>
    </target>

    <target name="deploy_spring"
            description="deploy spring binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/spring" includes="*.jar" />
        </copy>
    </target>

	<target name="deploy_aspectj"
            description="deploy AspectJ binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/aspectj" includes="*.jar" />
        </copy>
    </target>

    <target name="deploy_gateway"
        description="deploy gateway binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/gateway" includes="*.jar" />
        </copy>
    </target>

    <target name="deploy_slf4j"
            description="deploy spring binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/slf4j" includes="*.jar" />
        </copy>
    </target>

    <target name="deploy_xmlmerge"
            description="deploy XMLMerge binaries in ${jee.server.cspace}">
        <copy todir="${jee.server.cspace}/lib">
            <fileset dir="${basedir}/lib/xmlmerge" includes="*.jar" />
        </copy>
    </target>

    <target name="deploy_tenantconfig"
            description="deploy tenant configuration">
        <copy todir="${jee.server.cspace}/cspace/config/services">
            <fileset dir="${basedir}/src/main/cspace/config/services">
				<exclude name="resources/"/>
			</fileset>
			<filterset>
				<filter token="CSPACE_INSTANCE_ID" value="${cspace.instance.id}" />
				<filter token="DB_CSADMIN_NAME" value="${db.csadmin.name}" />
				<filter token="DB_NUXEO_NAME" value="${db.nuxeo.name}" />
				<filter token="DB_CSPACE_NAME" value="${db.cspace.name}" />
				<filter token="SERVICE_UI_JS_URL" value="${service.ui.js.url}" />
			</filterset>
        </copy>
		<!--
			We need to copy the binaries that are in the "resources" folder
			without the <filterset> in place because it seems to corrupt them.
		-->
        <copy todir="${jee.server.cspace}/cspace/config/services/resources">
            <fileset dir="${basedir}/src/main/cspace/config/services/resources"/>
        </copy>
    </target>

    <target name="deploy" depends="install"
            description="deploy common elements in ${jee.server.cspace}">
        <copy file="${basedir}/target/${common.jar}" todir="${jee.server.cspace}/lib"/>

        <antcall target="deploy_nuxeo" />
        <antcall target="deploy_aspectj" />
        <antcall target="deploy_gateway" />
        <antcall target="deploy_spring" />
        <antcall target="deploy_slf4j" />
        <antcall target="deploy_xmlmerge" />
        <antcall target="deploy_tenantconfig" />
    </target>

    <target name="undeploy"
            description="undeploy common elements from ${jee.server.cspace}">
        <antcall target="undeploy_nuxeo" />
        <antcall target="undeploy_aspectj" />
        <antcall target="undeploy_gateway" />
        <antcall target="undeploy_spring" />
		<antcall target="undeploy_slf4j" />
		<antcall target="undeploy_xmlmerge" />
		<!--
        <copy tofile="${jee.server.cspace}/conf/jboss-log4j.xml"
              file="${jee.server.cspace}/conf/jboss-log4j.xml.org"
              overwrite="true" failonerror="false" />
		-->
		<!--
        <delete failonerror="false" file="${jee.server.cspace}/conf/jboss-log4j-release.xml"/>
		-->
        <delete failonerror="false" file="${jee.server.cspace}/lib/${common.jar}"/>

        <delete failonerror="false">
            <fileset dir="${jee.server.cspace}/cspace/config/services" excludes="local/**" />
        </delete>
    </target>

    <target name="undeploy_nuxeo"
            description="undeploy nuxeo binaries from ${jee.server.cspace}">
        <pathconvert property="nuxeo.jars" pathsep=",">
            <fileset dir="${basedir}/lib/nuxeo" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${nuxeo.jars}" />
        </delete>

        <delete>
            <fileset dir="${jee.deploy.nuxeo.plugins}">
                <include name="collectionspace.shared.schema.collectionspace_core.jar"/>
            </fileset>
        </delete>
    </target>

    <target name="undeploy_spring"
            description="undeploy spring binaries from ${jee.server.cspace}">
        <pathconvert property="spring.jars" pathsep=",">
            <fileset dir="${basedir}/lib/spring" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${spring.jars}" />
        </delete>
    </target>

	<target name="undeploy_aspectj"
            description="undeploy AspectJ binaries from ${jee.server.cspace}">
        <pathconvert property="aspectj.jars" pathsep=",">
            <fileset dir="${basedir}/lib/aspectj" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${aspectj.jars}" />
        </delete>
    </target>

	<target name="undeploy_gateway"
            description="undeploy gateway binaries from ${jee.server.cspace}">
        <pathconvert property="gateway.jars" pathsep=",">
            <fileset dir="${basedir}/lib/gateway" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${gateway.jars}" />
        </delete>
    </target>

    <target name="undeploy_slf4j"
            description="undeploy SLF4J binaries from ${jee.server.cspace}">
        <pathconvert property="slf4j.jars" pathsep=",">
            <fileset dir="${basedir}/lib/slf4j" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${slf4j.jars}" />
        </delete>
    </target>

    <target name="undeploy_xmlmerge"
            description="undeploy XMLMerge binaries from ${jee.server.cspace}">
        <pathconvert property="xmlmerge.jars" pathsep=",">
            <fileset dir="${basedir}/lib/xmlmerge" includes="*.jar" />

            <chainedmapper>
                <flattenmapper />
                <regexpmapper from="^(.*?)-[^-]+\.jar$" to="\1-*.jar" />
            </chainedmapper>
        </pathconvert>

        <delete>
            <fileset dir="${jee.server.cspace}/lib" includes="${xmlmerge.jars}" />
        </delete>
    </target>

    <target name="dist_spring"
            description="dist spring binaries in ${dist.server.cspace}">
        <copy todir="${services.trunk}/${dist.server.cspace}/lib">
            <fileset dir="${basedir}/lib/spring"/>
        </copy>
    </target>

    <target name="dist"
            description="generate distribution for common elements" depends="package">
        <antcall target="dist_spring" />
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/config/services">
            <fileset dir="${basedir}/src/main/cspace/config/services"/>
        </copy>
    </target>

</project>
