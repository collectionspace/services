
<project name="authentication.service" default="package" basedir=".">
    <description>
        collectionspace authentication service
    </description>
    <!-- set global properties for this build -->
    <property name="services.trunk" value="../../.."/>
    <!-- enviornment should be declared before reading build.properties -->
    <property environment="env" />
    <property file="${services.trunk}/build.properties" />
    <property name="mvn.opts" value="-V" />
    <property name="src" location="src"/>
    <property name="authentication.jar" value="cspace-services-authn.jar"/>

    <condition property="osfamily-unix">
        <os family="unix" />
    </condition>
    <condition property="osfamily-windows">
        <os family="windows" />
    </condition>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
    </target>


    <target name="package" depends="package-unix,package-windows"
            description="Package CollectionSpace Services" />
    <target name="package-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="package-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="package" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="install" depends="install-unix,install-windows"
            description="Install" />
    <target name="install-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="install-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="install" />
            <arg value="-Dmaven.test.skip=true" />
            <arg value="-f" />
            <arg value="${basedir}/pom.xml" />
            <arg value="-N" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="clean" depends="clean-unix,clean-windows"
            description="Delete target directories" >
        <delete dir="${build}"/>
    </target>
    <target name="clean-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="clean-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="clean" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="test" depends="test-unix,test-windows" description="Run tests" />
    <target name="test-unix" if="osfamily-unix">
        <exec executable="mvn" failonerror="true">
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>
    <target name="test-windows" if="osfamily-windows">
        <exec executable="cmd" failonerror="true">
            <arg value="/c" />
            <arg value="mvn.bat" />
            <arg value="test" />
            <arg value="${mvn.opts}" />
        </exec>
    </target>

    <target name="deploy" depends="install"
            description="deploy authentication service in ${jee.server.cspace}">
        <copy file="${basedir}/target/${authentication.jar}" todir="${jee.server.cspace}/lib"/>
        <!-- This is JBoss specific and no longer needed
		<copy tofile="${jee.server.cspace}/conf/login-config.xml.org"
              file="${jee.server.cspace}/conf/login-config.xml"
              overwrite="false"/> -->
        <!-- This is JBoss specific and no longer needed
        <copy tofile="${jee.server.cspace}/conf/login-config.xml"
              file="${src}/main/resources/config/login-config.xml"
              overwrite="true"/> -->
        <copy todir="${jee.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
        <echo message="Check out Authentication Service Configuration Guide on wiki.collectionspace.org for more details" />
    </target>

    <target name="undeploy"
            description="undeploy authentication service from ${jee.server.cspace}">
        <delete file="${jee.server.cspace}/lib/${authentication.jar}"/>
		<!-- This is JBoss specific and no longer needed
        <copy tofile="${jee.server.cspace}/conf/login-config.xml"
              file="${jee.server.cspace}/conf/login-config.xml.org"
              overwrite="true" failonerror="false" /> -->
        <echo message="Check out Authentication Service Configuration Guide on wiki.collectionspace.org for more details"/>
    </target>

    <target name="dist"
            description="generate distribution for authentication service" depends="package">
        <copy todir="${services.trunk}/${dist.lib.cspace}">
            <fileset file="${basedir}/target/${authentication.jar}"/>
        </copy>
        <!-- copy db scripts, etc. -->
        <copy todir="${services.trunk}/${dist.server.cspace}/cspace/services">
            <fileset dir="${src}/main/resources/"/>
        </copy>
    </target>

</project>
